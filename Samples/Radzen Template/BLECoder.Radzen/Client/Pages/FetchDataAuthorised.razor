@page "/authorised/fetchdata"

@inject ILocalStorageServiceAsync LocalStorage

@inject AuthorisedWeatherForecastService weatherService

<RadzenCard>
    <h1>Weather forecast - Authorised</h1>

    <p>This component demonstrates fetching data from the server behind an authorisation guard.</p>

    @if (forecasts == null)
    {
        <div class="w-100 h-100">
            <RadzenProgressBar Value="100" class="m-auto" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        </div>
    }
    else
    {
        <RadzenDataGrid Data="@forecasts" TItem="WeatherForecast" ColumnWidth="300px" AllowColumnResize="true">
            <Columns>
                <RadzenDataGridColumn TItem="WeatherForecast" Property="Date" Title="Date" Width="100px" TextAlign="TextAlign.Center">
                    <Template Context="forecast">
                        @forecast.Date.ToShortDateString()
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="WeatherForecast" Property="TemperatureC" Title="Temp. (C)" Width="50px" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn TItem="WeatherForecast" Property="TemperatureF" Title="Temp. (F)" Width="50px" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn TItem="WeatherForecast" Property="Summary" Title="Summary" Width="150px" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn TItem="WeatherForecast" Property="Status" Title="Status" Width="150px" TextAlign="TextAlign.Center" />
            </Columns>
        </RadzenDataGrid>
    }
</RadzenCard>

@code {
    private WeatherForecast[] forecasts;

    [CascadingParameter(Name = "ErrorComponent")]
    protected IErrorComponent ErrorComponent { get; set; }

    [CascadingParameter(Name = "MainLayoutComponent")]
    protected IMainLayoutComponent MainLayoutComponent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await MainLayoutComponent.ShowBusyDialog();
        try
        {
            var response = await weatherService.GetForecast();

            if (response.Content != null)
            {
                forecasts = response.Content;
            }
            else
            {
                ErrorComponent.HandleFailedResponse(response);
            }

            if (forecasts?.Length > 0)
            {
                await LocalStorage.SetItemAsync("history", new WeatherForecastHistory() { Forecasts = forecasts });
            }
        }
        catch (Exception ex)
        {
            ErrorComponent.ShowError(ex.Message, ex.StackTrace);
        }

        await MainLayoutComponent.CloseDialog();
    }
}
