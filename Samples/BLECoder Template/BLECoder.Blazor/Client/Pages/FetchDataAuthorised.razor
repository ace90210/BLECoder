@page "/authorised/fetchdata"

@attribute [Authorize(Roles = "ExampleRole")]

@inject HttpAuthClient Http

<h1>Weather forecast - Authorised</h1>

<p>This component demonstrates fetching data from the server behind an authorisation guard.</p>

@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <p><em>Error: @errorMessage</em></p>    
}
else if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else 
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;

    string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.Client(true).GetFromJsonAsync<WeatherForecast[]>("WeatherForecast/authorised", async (r) =>
        {
            var responseContent = await r.Content.ReadAsStringAsync();

            if (string.IsNullOrWhiteSpace(responseContent))
                errorMessage = r.StatusCode.ToString();
            else
                errorMessage = $"{r.StatusCode} - {responseContent}";

        }, new WeatherForecast[0]);
    }
}
